const parseFromString = (template, type = 'text/html') => {
    return new DOMParser().parseFromString(template, type).body.firstElementChild;
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".example-component__button {\n  cursor: pointer;\n  box-shadow: -5px 5px black;\n  -webkit-user-select: none;\n      -ms-user-select: none;\n          user-select: none; }\n\n.example-component__button[type=submit] {\n  background: violet;\n  color: black;\n  text-transform: uppercase; }\n\n.example-component__button:active {\n  box-shadow: 0px 0px;\n  transform: translate(-5px, 5px); }\n";
styleInject(css_248z);

const exampleStyle = (styleOptions = {}) => {
    const DEFAULT_STYLES = {
        backgroundColor: 'aliceblue',
        color: 'black',
        fontFamily: 'inherit',
        fontSize: '1em'
    };
    const VAR_STYLES = {
        border: 'solid black',
        padding: '10px',
    };
    const PROP_STYLES = {
        backgroundColor: styleOptions.backgroundColor || DEFAULT_STYLES.backgroundColor,
        color: styleOptions.color || DEFAULT_STYLES.color,
        fontFamily: styleOptions.fontFamily || DEFAULT_STYLES.fontFamily,
        fontSize: styleOptions.fontSize || DEFAULT_STYLES.fontSize
    };

    return `
${css_248z}
.example-component__button {
    background-color: ${PROP_STYLES.backgroundColor};
    color: ${PROP_STYLES.color};
    font-family: ${PROP_STYLES.fontFamily};
    font-size: ${PROP_STYLES.fontSize};
    border: var(--border, ${VAR_STYLES.border});
    padding: var(--padding, ${VAR_STYLES.padding});
}
`.trim();
};

const fontSizeMap = {
    small: '.66em',
    medium: '1em',
    large: '1.5em'
};

class HTMLExampleButtonElement extends HTMLElement {
    constructor() {
        super();
        this._exampletext = '';
        this._exampletype = 'button';
        this.attachShadow({
            mode: 'open'
        });
        this._setup();
    }
    static get observedAttributes() {
        return [
            'examplebuttoncolor',
            'examplefont',
            'examplesize',
            'exampletext',
            'exampletextcolor',
            'exampletype'
        ];
    }
    get examplebuttoncolor() {
        return this._examplebuttoncolor;
    }
    set examplebuttoncolor(val) {
        this._examplebuttoncolor = val;
        this._styleOptions.backgroundColor = val;
        this._syncPropToAttr('examplebuttoncolor');
    }
    get examplefont() {
        return this._examplefont;
    }
    set examplefont(val) {
        this._examplefont = val;
        this._styleOptions.fontFamily = val;
        this._syncPropToAttr('examplefont');
    }
    get examplesize() {
        return this._examplesize;
    }
    set examplesize(val) {
        this._examplesize = val;
        this._styleOptions.fontSize = fontSizeMap[val];
        this._syncPropToAttr('examplesize');
    }
    get exampletext() {
        return this._exampletext;
    }
    set exampletext(val) {
        this._exampletext = val;
        this._syncPropToAttr('exampletext');
    }
    get exampletextcolor() {
        return this._exampletextcolor;
    }
    set exampletextcolor(val) {
        this._exampletextcolor = val;
        this._styleOptions.color = val;
        this._syncPropToAttr('exampletextcolor');
    }
    get exampletype() {
        return this._exampletype;
    }
    set exampletype(val) {
        this._exampletype = val;
        this._syncPropToAttr('exampletype');
    }
    connectedCallback() {
        this._render();
    }
    disconnectedCallback() {
        // ...
    }
    attributeChangedCallback(attr, oldVal, newVal) {
        if (this[attr] === newVal || oldVal === newVal) {
            return;
        }
        this[attr] = newVal;
    }
    _getTemplate() {
        const template = parseFromString(`
            <button class="example-component__button" type="${this._exampletype}">${this._exampletext}</button>
        `);
        return template;
    }
    _render() {
        this._updateStyle();
        if (this._template) {
            this.shadowRoot.replaceChild(this._getTemplate(), this.shadowRoot.children[1]);
            return;
        }
        this._template = this._getTemplate();
        this.shadowRoot.appendChild(this._template);
    }
    _setup() {
        const style = document.createElement('style');
        this.shadowRoot.appendChild(style);
        this._styleOptions = {
            backgroundColor: this.getAttribute('examplebuttoncolor'),
            color: this.getAttribute('exampletextcolor'),
            fontFamily: this.getAttribute('examplefont'),
            fontSize: fontSizeMap[this.getAttribute('examplesize')] || fontSizeMap.medium
        };
    }
    _syncPropToAttr(prop) {
        if (this[prop] === null) {
            this.removeAttribute(prop);
        }
        else {
            this.setAttribute(prop, this[prop]);
        }
        this._render();
    }
    _updateStyle() {
        if (this._style === exampleStyle(this._styleOptions)) {
            return;
        }
        this._style = exampleStyle(this._styleOptions);
        this.shadowRoot.querySelector('style').innerHTML = this._style;
    }
}
var exampleButton_component = (function () {
    const TAG = 'example-button';
    customElements.define(TAG, HTMLExampleButtonElement);
})();

export { exampleButton_component as HTMLExampleButtonElement };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
